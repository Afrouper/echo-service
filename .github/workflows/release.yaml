name: Build release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build:
    name: go ${{ matrix.version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        version: [ stable ]
        os: [ macos-latest, windows-latest, ubuntu-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.version }}

      - name: Build
        run: go build -o bin/ -v ./...

      - name: Test
        run: go test -v ./...

      - name: Compress
        uses: a7ul/tar-action@v1.1.2
        id: compress
        with:
          command: c
          #cwd: bin
          files: bin
          outPath: echo-service-${{ runner.os }}.tar.gz

      - name: Upload Distribution
        uses: actions/upload-artifact@v3
        with:
          name: artifacts-${{ runner.os }}
          path: "*.tar.gz"

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
          images: |
            afrouper/echo-service
            ghcr.io/afrouper/echo-service

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [ docker, build ]
    permissions:
      contents: write
    steps:
    - name: Download
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Infos
      run: ls -al artifacts

    - uses: ncipollo/release-action@v1
      name: Create Release
      with:
        draft: false
        generateReleaseNotes: true
        makeLatest: true
        artifacts: "artifacts/artifacts-Linux/*.tar.gz,artifacts/artifacts-macOS/*.tar.gz,artifacts/artifacts-Windows/*.tar.gz"